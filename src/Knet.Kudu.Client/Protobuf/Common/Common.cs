// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: kudu/common/common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Knet.Kudu.Client.Protobuf {

  /// <summary>Holder for reflection information generated from kudu/common/common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for kudu/common/common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhrdWR1L2NvbW1vbi9jb21tb24ucHJvdG8SBGt1ZHUaIGt1ZHUvY29tbW9u",
            "L3Jvd19vcGVyYXRpb25zLnByb3RvGiJrdWR1L3V0aWwvYmxvY2tfYmxvb21f",
            "ZmlsdGVyLnByb3RvGidrdWR1L3V0aWwvY29tcHJlc3Npb24vY29tcHJlc3Np",
            "b24ucHJvdG8aFGt1ZHUvdXRpbC9oYXNoLnByb3RvGhdrdWR1L3V0aWwvcGJf",
            "dXRpbC5wcm90byJKChZDb2x1bW5UeXBlQXR0cmlidXRlc1BCEhEKCXByZWNp",
            "c2lvbhgBIAEoBRINCgVzY2FsZRgCIAEoBRIOCgZsZW5ndGgYAyABKAUilQMK",
            "DkNvbHVtblNjaGVtYVBCEgoKAmlkGAEgASgNEgwKBG5hbWUYAiACKAkSHgoE",
            "dHlwZRgDIAIoDjIQLmt1ZHUuRGF0YVR5cGVQQhIVCgZpc19rZXkYBCABKAg6",
            "BWZhbHNlEhoKC2lzX251bGxhYmxlGAUgASgIOgVmYWxzZRIaChJyZWFkX2Rl",
            "ZmF1bHRfdmFsdWUYBiABKAwSGwoTd3JpdGVfZGVmYXVsdF92YWx1ZRgHIAEo",
            "DBI1CghlbmNvZGluZxgIIAEoDjIULmt1ZHUuRW5jb2RpbmdUeXBlUEI6DUFV",
            "VE9fRU5DT0RJTkcSQQoLY29tcHJlc3Npb24YCSABKA4yFy5rdWR1LkNvbXBy",
            "ZXNzaW9uVHlwZVBCOhNERUZBVUxUX0NPTVBSRVNTSU9OEhsKEGNmaWxlX2Js",
            "b2NrX3NpemUYCiABKAU6ATASNQoPdHlwZV9hdHRyaWJ1dGVzGAsgASgLMhwu",
            "a3VkdS5Db2x1bW5UeXBlQXR0cmlidXRlc1BCEg8KB2NvbW1lbnQYDCABKAki",
            "4wEKE0NvbHVtblNjaGVtYURlbHRhUEISDAoEbmFtZRgBIAEoCRIQCghuZXdf",
            "bmFtZRgCIAEoCRIVCg1kZWZhdWx0X3ZhbHVlGAQgASgMEhYKDnJlbW92ZV9k",
            "ZWZhdWx0GAUgASgIEiYKCGVuY29kaW5nGAYgASgOMhQua3VkdS5FbmNvZGlu",
            "Z1R5cGVQQhIsCgtjb21wcmVzc2lvbhgHIAEoDjIXLmt1ZHUuQ29tcHJlc3Np",
            "b25UeXBlUEISEgoKYmxvY2tfc2l6ZRgIIAEoBRITCgtuZXdfY29tbWVudBgJ",
            "IAEoCSIxCghTY2hlbWFQQhIlCgdjb2x1bW5zGAEgAygLMhQua3VkdS5Db2x1",
            "bW5TY2hlbWFQQiIoCgpIb3N0UG9ydFBCEgwKBGhvc3QYASACKAkSDAoEcG9y",
            "dBgCIAIoDSKsBQoRUGFydGl0aW9uU2NoZW1hUEISRwoTaGFzaF9idWNrZXRf",
            "c2NoZW1hcxgBIAMoCzIqLmt1ZHUuUGFydGl0aW9uU2NoZW1hUEIuSGFzaEJ1",
            "Y2tldFNjaGVtYVBCEjsKDHJhbmdlX3NjaGVtYRgCIAEoCzIlLmt1ZHUuUGFy",
            "dGl0aW9uU2NoZW1hUEIuUmFuZ2VTY2hlbWFQQhJPChJyYW5nZV9oYXNoX3Nj",
            "aGVtYXMYAyADKAsyMy5rdWR1LlBhcnRpdGlvblNjaGVtYVBCLlBlclJhbmdl",
            "SGFzaEJ1Y2tldFNjaGVtYXNQQhIrCgxyYW5nZV9ib3VuZHMYBCADKAsyFS5r",
            "dWR1LlJvd09wZXJhdGlvbnNQQhpAChJDb2x1bW5JZGVudGlmaWVyUEISDAoC",
            "aWQYASABKAVIABIOCgRuYW1lGAIgASgJSABCDAoKaWRlbnRpZmllchpMCg1S",
            "YW5nZVNjaGVtYVBCEjsKB2NvbHVtbnMYASADKAsyKi5rdWR1LlBhcnRpdGlv",
            "blNjaGVtYVBCLkNvbHVtbklkZW50aWZpZXJQQhqhAQoSSGFzaEJ1Y2tldFNj",
            "aGVtYVBCEjsKB2NvbHVtbnMYASADKAsyKi5rdWR1LlBhcnRpdGlvblNjaGVt",
            "YVBCLkNvbHVtbklkZW50aWZpZXJQQhITCgtudW1fYnVja2V0cxgCIAIoBRIM",
            "CgRzZWVkGAMgASgNEisKDmhhc2hfYWxnb3JpdGhtGAQgASgOMhMua3VkdS5I",
            "YXNoQWxnb3JpdGhtGl8KG1BlclJhbmdlSGFzaEJ1Y2tldFNjaGVtYXNQQhJA",
            "CgxoYXNoX3NjaGVtYXMYASADKAsyKi5rdWR1LlBhcnRpdGlvblNjaGVtYVBC",
            "Lkhhc2hCdWNrZXRTY2hlbWFQQiJfCgtQYXJ0aXRpb25QQhIYCgxoYXNoX2J1",
            "Y2tldHMYASADKAVCAhABEhsKE3BhcnRpdGlvbl9rZXlfc3RhcnQYAiABKAwS",
            "GQoRcGFydGl0aW9uX2tleV9lbmQYAyABKAwi7wQKEUNvbHVtblByZWRpY2F0",
            "ZVBCEg4KBmNvbHVtbhgBIAEoCRIuCgVyYW5nZRgCIAEoCzIdLmt1ZHUuQ29s",
            "dW1uUHJlZGljYXRlUEIuUmFuZ2VIABI0CghlcXVhbGl0eRgDIAEoCzIgLmt1",
            "ZHUuQ29sdW1uUHJlZGljYXRlUEIuRXF1YWxpdHlIABI4Cgtpc19ub3RfbnVs",
            "bBgEIAEoCzIhLmt1ZHUuQ29sdW1uUHJlZGljYXRlUEIuSXNOb3ROdWxsSAAS",
            "MQoHaW5fbGlzdBgFIAEoCzIeLmt1ZHUuQ29sdW1uUHJlZGljYXRlUEIuSW5M",
            "aXN0SAASMQoHaXNfbnVsbBgGIAEoCzIeLmt1ZHUuQ29sdW1uUHJlZGljYXRl",
            "UEIuSXNOdWxsSAASQAoPaW5fYmxvb21fZmlsdGVyGAcgASgLMiUua3VkdS5D",
            "b2x1bW5QcmVkaWNhdGVQQi5JbkJsb29tRmlsdGVySAAaMQoFUmFuZ2USEwoF",
            "bG93ZXIYASABKAxCBIi1GAESEwoFdXBwZXIYAiABKAxCBIi1GAEaHwoIRXF1",
            "YWxpdHkSEwoFdmFsdWUYASABKAxCBIi1GAEaHgoGSW5MaXN0EhQKBnZhbHVl",
            "cxgBIAMoDEIEiLUYARoLCglJc05vdE51bGwaCAoGSXNOdWxsGmoKDUluQmxv",
            "b21GaWx0ZXISLwoNYmxvb21fZmlsdGVycxgBIAMoCzIYLmt1ZHUuQmxvY2tC",
            "bG9vbUZpbHRlclBCEhMKBWxvd2VyGAIgASgMQgSItRgBEhMKBXVwcGVyGAMg",
            "ASgMQgSItRgBQgsKCXByZWRpY2F0ZSJrCgpLZXlSYW5nZVBCEh8KEXN0YXJ0",
            "X3ByaW1hcnlfa2V5GAEgASgMQgSItRgBEh4KEHN0b3BfcHJpbWFyeV9rZXkY",
            "AiABKAxCBIi1GAESHAoUc2l6ZV9ieXRlc19lc3RpbWF0ZXMYAyACKAQiTwoS",
            "VGFibGVFeHRyYUNvbmZpZ1BCEhsKE2hpc3RvcnlfbWF4X2FnZV9zZWMYASAB",
            "KAUSHAoUbWFpbnRlbmFuY2VfcHJpb3JpdHkYAiABKAUqqAIKCkRhdGFUeXBl",
            "UEISEQoMVU5LTk9XTl9EQVRBEOcHEgkKBVVJTlQ4EAASCAoESU5UOBABEgoK",
            "BlVJTlQxNhACEgkKBUlOVDE2EAMSCgoGVUlOVDMyEAQSCQoFSU5UMzIQBRIK",
            "CgZVSU5UNjQQBhIJCgVJTlQ2NBAHEgoKBlNUUklORxAIEggKBEJPT0wQCRIJ",
            "CgVGTE9BVBAKEgoKBkRPVUJMRRALEgoKBkJJTkFSWRAMEhMKD1VOSVhUSU1F",
            "X01JQ1JPUxANEgoKBklOVDEyOBAOEg0KCURFQ0lNQUwzMhAPEg0KCURFQ0lN",
            "QUw2NBAQEg4KCkRFQ0lNQUwxMjgQERIOCgpJU19ERUxFVEVEEBISCwoHVkFS",
            "Q0hBUhATEggKBERBVEUQFCqiAQoORW5jb2RpbmdUeXBlUEISFQoQVU5LTk9X",
            "Tl9FTkNPRElORxDnBxIRCg1BVVRPX0VOQ09ESU5HEAASEgoOUExBSU5fRU5D",
            "T0RJTkcQARITCg9QUkVGSVhfRU5DT0RJTkcQAhIQCgxHUk9VUF9WQVJJTlQQ",
            "AxIHCgNSTEUQBBIRCg1ESUNUX0VOQ09ESU5HEAUSDwoLQklUX1NIVUZGTEUQ",
            "BipuCglIbXNNb2RlUEISCAoETk9ORRAAEhoKFkRJU0FCTEVfSElWRV9NRVRB",
            "U1RPUkUQAxIZChVFTkFCTEVfSElWRV9NRVRBU1RPUkUQARIgChxFTkFCTEVf",
            "TUVUQVNUT1JFX0lOVEVHUkFUSU9OEAIqagoZRXh0ZXJuYWxDb25zaXN0ZW5j",
            "eU1vZGVQQhIlCiFVTktOT1dOX0VYVEVSTkFMX0NPTlNJU1RFTkNZX01PREUQ",
            "ABIVChFDTElFTlRfUFJPUEFHQVRFRBABEg8KC0NPTU1JVF9XQUlUEAIqYAoK",
            "UmVhZE1vZGVQQhIVChFVTktOT1dOX1JFQURfTU9ERRAAEg8KC1JFQURfTEFU",
            "RVNUEAESFAoQUkVBRF9BVF9TTkFQU0hPVBACEhQKEFJFQURfWU9VUl9XUklU",
            "RVMQAypBCgtPcmRlck1vZGVQQhIWChJVTktOT1dOX09SREVSX01PREUQABIN",
            "CglVTk9SREVSRUQQARILCgdPUkRFUkVEEAIqWQoSUmVwbGljYVNlbGVjdGlv",
            "blBCEh0KGVVOS05PV05fUkVQTElDQV9TRUxFQ1RJT04QABIPCgtMRUFERVJf",
            "T05MWRABEhMKD0NMT1NFU1RfUkVQTElDQRACKjYKC1RhYmxlVHlwZVBCEhEK",
            "DURFRkFVTFRfVEFCTEUQABIUChBUWE5fU1RBVFVTX1RBQkxFEAFCLQoPb3Jn",
            "LmFwYWNoZS5rdWR1qgIZS25ldC5LdWR1LkNsaWVudC5Qcm90b2J1Zg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Knet.Kudu.Client.Protobuf.RowOperationsReflection.Descriptor, global::Knet.Kudu.Client.Protobuf.BlockBloomFilterReflection.Descriptor, global::Knet.Kudu.Client.Protobuf.CompressionReflection.Descriptor, global::Knet.Kudu.Client.Protobuf.HashReflection.Descriptor, global::Knet.Kudu.Client.Protobuf.PbUtilReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Knet.Kudu.Client.Protobuf.DataTypePB), typeof(global::Knet.Kudu.Client.Protobuf.EncodingTypePB), typeof(global::Knet.Kudu.Client.Protobuf.HmsModePB), typeof(global::Knet.Kudu.Client.Protobuf.ExternalConsistencyModePB), typeof(global::Knet.Kudu.Client.Protobuf.ReadModePB), typeof(global::Knet.Kudu.Client.Protobuf.OrderModePB), typeof(global::Knet.Kudu.Client.Protobuf.ReplicaSelectionPB), typeof(global::Knet.Kudu.Client.Protobuf.TableTypePB), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.ColumnTypeAttributesPB), global::Knet.Kudu.Client.Protobuf.ColumnTypeAttributesPB.Parser, new[]{ "Precision", "Scale", "Length" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.ColumnSchemaPB), global::Knet.Kudu.Client.Protobuf.ColumnSchemaPB.Parser, new[]{ "Id", "Name", "Type", "IsKey", "IsNullable", "ReadDefaultValue", "WriteDefaultValue", "Encoding", "Compression", "CfileBlockSize", "TypeAttributes", "Comment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.ColumnSchemaDeltaPB), global::Knet.Kudu.Client.Protobuf.ColumnSchemaDeltaPB.Parser, new[]{ "Name", "NewName", "DefaultValue", "RemoveDefault", "Encoding", "Compression", "BlockSize", "NewComment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.SchemaPB), global::Knet.Kudu.Client.Protobuf.SchemaPB.Parser, new[]{ "Columns" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.HostPortPB), global::Knet.Kudu.Client.Protobuf.HostPortPB.Parser, new[]{ "Host", "Port" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB), global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Parser, new[]{ "HashBucketSchemas", "RangeSchema", "RangeHashSchemas", "RangeBounds" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.ColumnIdentifierPB), global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.ColumnIdentifierPB.Parser, new[]{ "Id", "Name" }, new[]{ "Identifier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.RangeSchemaPB), global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.RangeSchemaPB.Parser, new[]{ "Columns" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.HashBucketSchemaPB), global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.HashBucketSchemaPB.Parser, new[]{ "Columns", "NumBuckets", "Seed", "HashAlgorithm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.PerRangeHashBucketSchemasPB), global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.PerRangeHashBucketSchemasPB.Parser, new[]{ "HashSchemas" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.PartitionPB), global::Knet.Kudu.Client.Protobuf.PartitionPB.Parser, new[]{ "HashBuckets", "PartitionKeyStart", "PartitionKeyEnd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB), global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Parser, new[]{ "Column", "Range", "Equality", "IsNotNull", "InList", "IsNull", "InBloomFilter" }, new[]{ "Predicate" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.Range), global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.Range.Parser, new[]{ "Lower", "Upper" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.Equality), global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.Equality.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.InList), global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.InList.Parser, new[]{ "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.IsNotNull), global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.IsNotNull.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.IsNull), global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.IsNull.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.InBloomFilter), global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.InBloomFilter.Parser, new[]{ "BloomFilters", "Lower", "Upper" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.KeyRangePB), global::Knet.Kudu.Client.Protobuf.KeyRangePB.Parser, new[]{ "StartPrimaryKey", "StopPrimaryKey", "SizeBytesEstimates" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.TableExtraConfigPB), global::Knet.Kudu.Client.Protobuf.TableExtraConfigPB.Parser, new[]{ "HistoryMaxAgeSec", "MaintenancePriority" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// If you add a new type keep in mind to add it to the end
  /// or update AddMapping() functions like the one in key_encoder.cc
  /// that have a vector that maps the protobuf tag with the index.
  /// </summary>
  public enum DataTypePB {
    [pbr::OriginalName("UNKNOWN_DATA")] UnknownData = 999,
    [pbr::OriginalName("UINT8")] Uint8 = 0,
    [pbr::OriginalName("INT8")] Int8 = 1,
    [pbr::OriginalName("UINT16")] Uint16 = 2,
    [pbr::OriginalName("INT16")] Int16 = 3,
    [pbr::OriginalName("UINT32")] Uint32 = 4,
    [pbr::OriginalName("INT32")] Int32 = 5,
    [pbr::OriginalName("UINT64")] Uint64 = 6,
    [pbr::OriginalName("INT64")] Int64 = 7,
    [pbr::OriginalName("STRING")] String = 8,
    [pbr::OriginalName("BOOL")] Bool = 9,
    [pbr::OriginalName("FLOAT")] Float = 10,
    [pbr::OriginalName("DOUBLE")] Double = 11,
    [pbr::OriginalName("BINARY")] Binary = 12,
    [pbr::OriginalName("UNIXTIME_MICROS")] UnixtimeMicros = 13,
    [pbr::OriginalName("INT128")] Int128 = 14,
    [pbr::OriginalName("DECIMAL32")] Decimal32 = 15,
    [pbr::OriginalName("DECIMAL64")] Decimal64 = 16,
    [pbr::OriginalName("DECIMAL128")] Decimal128 = 17,
    /// <summary>
    /// virtual column; not a real data type
    /// </summary>
    [pbr::OriginalName("IS_DELETED")] IsDeleted = 18,
    [pbr::OriginalName("VARCHAR")] Varchar = 19,
    [pbr::OriginalName("DATE")] Date = 20,
  }

  public enum EncodingTypePB {
    [pbr::OriginalName("UNKNOWN_ENCODING")] UnknownEncoding = 999,
    [pbr::OriginalName("AUTO_ENCODING")] AutoEncoding = 0,
    [pbr::OriginalName("PLAIN_ENCODING")] PlainEncoding = 1,
    [pbr::OriginalName("PREFIX_ENCODING")] PrefixEncoding = 2,
    /// <summary>
    /// GROUP_VARINT encoding is deprecated and no longer implemented.
    /// </summary>
    [pbr::OriginalName("GROUP_VARINT")] GroupVarint = 3,
    [pbr::OriginalName("RLE")] Rle = 4,
    [pbr::OriginalName("DICT_ENCODING")] DictEncoding = 5,
    [pbr::OriginalName("BIT_SHUFFLE")] BitShuffle = 6,
  }

  /// <summary>
  /// Enums that specify the HMS-related configurations for a Kudu mini-cluster.
  /// </summary>
  public enum HmsModePB {
    /// <summary>
    /// No HMS will be started.
    /// </summary>
    [pbr::OriginalName("NONE")] None = 0,
    /// <summary>
    /// The HMS will be started, but will not be configured to use the Kudu
    /// plugin.
    /// </summary>
    [pbr::OriginalName("DISABLE_HIVE_METASTORE")] DisableHiveMetastore = 3,
    /// <summary>
    /// The HMS will be started and configured to use the Kudu plugin, but the
    /// Kudu mini-cluster will not be configured to synchronize with it.
    /// </summary>
    [pbr::OriginalName("ENABLE_HIVE_METASTORE")] EnableHiveMetastore = 1,
    /// <summary>
    /// The HMS will be started and configured to use the Kudu plugin, and the
    /// Kudu mini-cluster will be configured to synchronize with it.
    /// </summary>
    [pbr::OriginalName("ENABLE_METASTORE_INTEGRATION")] EnableMetastoreIntegration = 2,
  }

  /// <summary>
  /// The external consistency mode for client requests.
  /// This defines how ops and/or sequences of operations that touch
  /// several TabletServers, in different machines, can be observed by external
  /// clients.
  ///
  /// Note that ExternalConsistencyModePB makes no guarantee on atomicity, i.e.
  /// no sequence of operations is made atomic (or transactional) just because
  /// an external consistency mode is set.
  /// Note also that ExternalConsistencyModePB has no implication on the
  /// consistency between replicas of the same tablet.
  /// </summary>
  public enum ExternalConsistencyModePB {
    [pbr::OriginalName("UNKNOWN_EXTERNAL_CONSISTENCY_MODE")] UnknownExternalConsistencyMode = 0,
    /// <summary>
    /// The response to any write will contain a timestamp.
    /// Any further calls from the same client to other servers will update
    /// those servers with that timestamp. The user will make sure that the
    /// timestamp is propagated through back-channels to other
    /// KuduClient's.
    ///
    /// WARNING: Failure to propagate timestamp information through
    /// back-channels will negate any external consistency guarantee under this
    /// mode.
    ///
    /// Example:
    /// 1 - Client A executes operation X in Tablet A
    /// 2 - Afterwards, Client A executes operation Y in Tablet B
    ///
    /// Client B may observe the following operation sequences:
    /// {}, {X}, {X Y}
    ///
    /// This is the default mode.
    /// </summary>
    [pbr::OriginalName("CLIENT_PROPAGATED")] ClientPropagated = 1,
    /// <summary>
    /// The server will guarantee that each op is externally consistent by making
    /// sure that none of its results are visible until every Kudu server agrees
    /// that the op is in the past.  The client is not obligated to forward
    /// timestamp information through back-channels.
    ///
    /// WARNING: Depending on the clock synchronization state of TabletServers
    /// this may imply considerable latency. Moreover operations with
    /// COMMIT_WAIT requested external consistency will outright fail if
    /// TabletServer clocks are either unsynchronized or synchronized but
    /// with a maximum error which surpasses a pre-configured one.
    ///
    /// Example:
    /// - Client A executes operation X in Tablet A
    /// - Afterwards, Client A executes operation Y in Tablet B
    ///
    /// Client B may observe the following operation sequences:
    /// {}, {X}, {X Y}
    /// </summary>
    [pbr::OriginalName("COMMIT_WAIT")] CommitWait = 2,
  }

  /// <summary>
  /// The possible read modes for clients.
  /// Clients set these in Scan requests.
  /// The server keeps 2 snapshot boundaries:
  /// - The earliest snapshot: this corresponds to the earliest kept undo records
  ///   in the tablet, meaning the current state (Base) can be undone up to
  ///   this snapshot.
  /// - The latest snapshot: This corresponds to the instant beyond which no op
  ///   will have an earlier timestamp. Usually this corresponds to whatever
  ///   clock->Now() returns, but can be higher if the client propagates a
  ///   timestamp (see below).
  /// </summary>
  public enum ReadModePB {
    [pbr::OriginalName("UNKNOWN_READ_MODE")] UnknownReadMode = 0,
    /// <summary>
    /// When READ_LATEST is specified the server will execute the read independently
    /// of the clock and will always return all visible writes at the time the request
    /// was received. This type of read does not return a snapshot timestamp since
    /// it might not be repeatable, i.e. a later read executed at the same snapshot
    /// timestamp might yield rows that were committed by in-flight ops.
    ///
    /// This is the default mode.
    /// </summary>
    [pbr::OriginalName("READ_LATEST")] ReadLatest = 1,
    /// <summary>
    /// When READ_AT_SNAPSHOT is specified the server will attempt to perform a read
    /// at the required snapshot. If no snapshot is defined the server will take the
    /// current time as the snapshot timestamp. Snapshot reads are repeatable, i.e.
    /// all future reads at the same timestamp will yield the same rows. This is
    /// performed at the expense of waiting for in-flight ops whose timestamp
    /// is lower than the snapshot's timestamp to complete.
    ///
    /// When mixing reads and writes clients that specify COMMIT_WAIT as their
    /// external consistency mode and then use the returned write_timestamp
    /// to perform snapshot reads are guaranteed that that snapshot time is
    /// considered in the past by all servers and no additional action is
    /// necessary. Clients using CLIENT_PROPAGATED however must forcibly propagate
    /// the timestamps even at read time, so that the server will not generate
    /// any more ops before the snapshot requested by the client.
    /// The latter option is implemented by allowing the client to specify one or
    /// two timestamps, the first one obtained from the previous CLIENT_PROPAGATED
    /// write, directly or through back-channels, must be signed and will be
    /// checked by the server. The second one, if defined, is the actual snapshot
    /// read time. When selecting both the latter must be lower than or equal to
    /// the former.
    /// TODO implement actually signing the propagated timestamp.
    /// </summary>
    [pbr::OriginalName("READ_AT_SNAPSHOT")] ReadAtSnapshot = 2,
    /// <summary>
    /// When READ_YOUR_WRITES is specified, the server will pick a timestamp to use
    /// for a server-local snapshot scan subject to the following criteria:
    /// (1) It will be higher than the propagated timestamp,
    /// (2) It will attempt to minimize latency caused by waiting for outstanding
    ///     write ops to complete.
    /// More specifically, the server will choose the latest timestamp higher than
    /// the provided propagated timestamp bound that allows execution of the
    /// reads without being blocked by the in-flight ops (however the
    /// read can be blocked if the propagated timestamp is higher than some in-flight
    /// ops). If no propagated timestamp is provided the server will choose
    /// a timestamp such that all ops before it are committed. The chosen
    /// timestamp will be returned back to the client as 'snapshot timestamp'. The Kudu
    /// client library will use it as the propagated timestamp for subsequent reads
    /// to avoid unnecessarily waiting.
    ///
    /// Reads in this mode are not repeatable: two READ_YOUR_WRITES reads, even if
    /// they provide the same propagated timestamp bound, can execute at different
    /// timestamps and thus return different results. However, it allows
    /// read-your-writes and read-your-reads for each client, as the chosen
    /// timestamp must be higher than the one of the last write or read,
    /// known from the propagated timestamp.
    /// </summary>
    [pbr::OriginalName("READ_YOUR_WRITES")] ReadYourWrites = 3,
  }

  /// <summary>
  /// The possible order modes for clients.
  /// Clients specify these in new scan requests.
  /// Ordered scans are fault-tolerant, and can be retried elsewhere in the case
  /// of tablet server failure. However, ordered scans impose additional overhead
  /// since the tablet server needs to sort the result rows.
  /// </summary>
  public enum OrderModePB {
    [pbr::OriginalName("UNKNOWN_ORDER_MODE")] UnknownOrderMode = 0,
    /// <summary>
    /// This is the default order mode.
    /// </summary>
    [pbr::OriginalName("UNORDERED")] Unordered = 1,
    [pbr::OriginalName("ORDERED")] Ordered = 2,
  }

  /// <summary>
  /// Policy with which to choose among multiple replicas.
  /// </summary>
  public enum ReplicaSelectionPB {
    [pbr::OriginalName("UNKNOWN_REPLICA_SELECTION")] UnknownReplicaSelection = 0,
    /// <summary>
    /// Select the LEADER replica.
    /// </summary>
    [pbr::OriginalName("LEADER_ONLY")] LeaderOnly = 1,
    /// <summary>
    /// Select the closest replica to the client. Replicas are classified from
    /// closest to furthest as follows:
    ///   - Local replicas
    ///   - Replicas whose tablet server has the same location as the client
    ///   - All other replicas
    /// </summary>
    [pbr::OriginalName("CLOSEST_REPLICA")] ClosestReplica = 2,
  }

  /// <summary>
  /// The type of a given table. This is useful in determining whether a
  /// table/tablet stores user-specified data, as opposed to being a Kudu-internal
  /// system table.
  /// </summary>
  public enum TableTypePB {
    /// <summary>
    /// The table stores user data.
    /// </summary>
    [pbr::OriginalName("DEFAULT_TABLE")] DefaultTable = 0,
    /// <summary>
    /// The table stores transaction status management metadata.
    /// </summary>
    [pbr::OriginalName("TXN_STATUS_TABLE")] TxnStatusTable = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Holds detailed attributes for the column. Only certain fields will be set,
  /// depending on the type of the column.
  /// </summary>
  public sealed partial class ColumnTypeAttributesPB : pb::IMessage<ColumnTypeAttributesPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<ColumnTypeAttributesPB> _parser = new pb::MessageParser<ColumnTypeAttributesPB>(() => new ColumnTypeAttributesPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColumnTypeAttributesPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnTypeAttributesPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnTypeAttributesPB(ColumnTypeAttributesPB other) : this() {
      _hasBits0 = other._hasBits0;
      precision_ = other.precision_;
      scale_ = other.scale_;
      length_ = other.length_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnTypeAttributesPB Clone() {
      return new ColumnTypeAttributesPB(this);
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 1;
    private readonly static int PrecisionDefaultValue = 0;

    private int precision_;
    /// <summary>
    /// For decimal columns
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Precision {
      get { if ((_hasBits0 & 1) != 0) { return precision_; } else { return PrecisionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        precision_ = value;
      }
    }
    /// <summary>Gets whether the "precision" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrecision {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "precision" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrecision() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private readonly static int ScaleDefaultValue = 0;

    private int scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Scale {
      get { if ((_hasBits0 & 2) != 0) { return scale_; } else { return ScaleDefaultValue; } }
      set {
        _hasBits0 |= 2;
        scale_ = value;
      }
    }
    /// <summary>Gets whether the "scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasScale {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScale() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 3;
    private readonly static int LengthDefaultValue = 0;

    private int length_;
    /// <summary>
    /// For varchar columns
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { if ((_hasBits0 & 4) != 0) { return length_; } else { return LengthDefaultValue; } }
      set {
        _hasBits0 |= 4;
        length_ = value;
      }
    }
    /// <summary>Gets whether the "length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLength {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLength() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColumnTypeAttributesPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColumnTypeAttributesPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Precision != other.Precision) return false;
      if (Scale != other.Scale) return false;
      if (Length != other.Length) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPrecision) hash ^= Precision.GetHashCode();
      if (HasScale) hash ^= Scale.GetHashCode();
      if (HasLength) hash ^= Length.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPrecision) {
        output.WriteRawTag(8);
        output.WriteInt32(Precision);
      }
      if (HasScale) {
        output.WriteRawTag(16);
        output.WriteInt32(Scale);
      }
      if (HasLength) {
        output.WriteRawTag(24);
        output.WriteInt32(Length);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPrecision) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Precision);
      }
      if (HasScale) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Scale);
      }
      if (HasLength) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColumnTypeAttributesPB other) {
      if (other == null) {
        return;
      }
      if (other.HasPrecision) {
        Precision = other.Precision;
      }
      if (other.HasScale) {
        Scale = other.Scale;
      }
      if (other.HasLength) {
        Length = other.Length;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Precision = input.ReadInt32();
            break;
          }
          case 16: {
            Scale = input.ReadInt32();
            break;
          }
          case 24: {
            Length = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO: Differentiate between the schema attributes
  /// that are only relevant to the server (e.g.,
  /// encoding and compression) and those that also
  /// matter to the client.
  /// </summary>
  public sealed partial class ColumnSchemaPB : pb::IMessage<ColumnSchemaPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<ColumnSchemaPB> _parser = new pb::MessageParser<ColumnSchemaPB>(() => new ColumnSchemaPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColumnSchemaPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnSchemaPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnSchemaPB(ColumnSchemaPB other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      type_ = other.type_;
      isKey_ = other.isKey_;
      isNullable_ = other.isNullable_;
      readDefaultValue_ = other.readDefaultValue_;
      writeDefaultValue_ = other.writeDefaultValue_;
      encoding_ = other.encoding_;
      compression_ = other.compression_;
      cfileBlockSize_ = other.cfileBlockSize_;
      typeAttributes_ = other.typeAttributes_ != null ? other.typeAttributes_.Clone() : null;
      comment_ = other.comment_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnSchemaPB Clone() {
      return new ColumnSchemaPB(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private readonly static global::Knet.Kudu.Client.Protobuf.DataTypePB TypeDefaultValue = global::Knet.Kudu.Client.Protobuf.DataTypePB.UnknownData;

    private global::Knet.Kudu.Client.Protobuf.DataTypePB type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Knet.Kudu.Client.Protobuf.DataTypePB Type {
      get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "is_key" field.</summary>
    public const int IsKeyFieldNumber = 4;
    private readonly static bool IsKeyDefaultValue = false;

    private bool isKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKey {
      get { if ((_hasBits0 & 4) != 0) { return isKey_; } else { return IsKeyDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isKey_ = value;
      }
    }
    /// <summary>Gets whether the "is_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsKey {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "is_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsKey() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "is_nullable" field.</summary>
    public const int IsNullableFieldNumber = 5;
    private readonly static bool IsNullableDefaultValue = false;

    private bool isNullable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNullable {
      get { if ((_hasBits0 & 8) != 0) { return isNullable_; } else { return IsNullableDefaultValue; } }
      set {
        _hasBits0 |= 8;
        isNullable_ = value;
      }
    }
    /// <summary>Gets whether the "is_nullable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsNullable {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "is_nullable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsNullable() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "read_default_value" field.</summary>
    public const int ReadDefaultValueFieldNumber = 6;
    private readonly static pb::ByteString ReadDefaultValueDefaultValue = pb::ByteString.Empty;

    private pb::ByteString readDefaultValue_;
    /// <summary>
    /// Default values.
    /// NOTE: as far as clients are concerned, there is only one
    /// "default value" of a column. The read/write defaults are used
    /// internally and should not be exposed by any public client APIs.
    ///
    /// When passing schemas to the master for create/alter table,
    /// specify the default in 'read_default_value'.
    ///
    /// Contrary to this, when the client opens a table, it will receive
    /// both the read and write defaults, but the *write* default is
    /// what should be exposed as the "current" default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReadDefaultValue {
      get { return readDefaultValue_ ?? ReadDefaultValueDefaultValue; }
      set {
        readDefaultValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "read_default_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReadDefaultValue {
      get { return readDefaultValue_ != null; }
    }
    /// <summary>Clears the value of the "read_default_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReadDefaultValue() {
      readDefaultValue_ = null;
    }

    /// <summary>Field number for the "write_default_value" field.</summary>
    public const int WriteDefaultValueFieldNumber = 7;
    private readonly static pb::ByteString WriteDefaultValueDefaultValue = pb::ByteString.Empty;

    private pb::ByteString writeDefaultValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString WriteDefaultValue {
      get { return writeDefaultValue_ ?? WriteDefaultValueDefaultValue; }
      set {
        writeDefaultValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "write_default_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWriteDefaultValue {
      get { return writeDefaultValue_ != null; }
    }
    /// <summary>Clears the value of the "write_default_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWriteDefaultValue() {
      writeDefaultValue_ = null;
    }

    /// <summary>Field number for the "encoding" field.</summary>
    public const int EncodingFieldNumber = 8;
    private readonly static global::Knet.Kudu.Client.Protobuf.EncodingTypePB EncodingDefaultValue = global::Knet.Kudu.Client.Protobuf.EncodingTypePB.AutoEncoding;

    private global::Knet.Kudu.Client.Protobuf.EncodingTypePB encoding_;
    /// <summary>
    /// The following attributes refer to the on-disk storage of the column.
    /// They won't always be set, depending on context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Knet.Kudu.Client.Protobuf.EncodingTypePB Encoding {
      get { if ((_hasBits0 & 16) != 0) { return encoding_; } else { return EncodingDefaultValue; } }
      set {
        _hasBits0 |= 16;
        encoding_ = value;
      }
    }
    /// <summary>Gets whether the "encoding" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEncoding {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "encoding" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncoding() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "compression" field.</summary>
    public const int CompressionFieldNumber = 9;
    private readonly static global::Knet.Kudu.Client.Protobuf.CompressionTypePB CompressionDefaultValue = global::Knet.Kudu.Client.Protobuf.CompressionTypePB.DefaultCompression;

    private global::Knet.Kudu.Client.Protobuf.CompressionTypePB compression_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Knet.Kudu.Client.Protobuf.CompressionTypePB Compression {
      get { if ((_hasBits0 & 32) != 0) { return compression_; } else { return CompressionDefaultValue; } }
      set {
        _hasBits0 |= 32;
        compression_ = value;
      }
    }
    /// <summary>Gets whether the "compression" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCompression {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "compression" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCompression() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "cfile_block_size" field.</summary>
    public const int CfileBlockSizeFieldNumber = 10;
    private readonly static int CfileBlockSizeDefaultValue = 0;

    private int cfileBlockSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CfileBlockSize {
      get { if ((_hasBits0 & 64) != 0) { return cfileBlockSize_; } else { return CfileBlockSizeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        cfileBlockSize_ = value;
      }
    }
    /// <summary>Gets whether the "cfile_block_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCfileBlockSize {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "cfile_block_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCfileBlockSize() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "type_attributes" field.</summary>
    public const int TypeAttributesFieldNumber = 11;
    private global::Knet.Kudu.Client.Protobuf.ColumnTypeAttributesPB typeAttributes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Knet.Kudu.Client.Protobuf.ColumnTypeAttributesPB TypeAttributes {
      get { return typeAttributes_; }
      set {
        typeAttributes_ = value;
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 12;
    private readonly static string CommentDefaultValue = "";

    private string comment_;
    /// <summary>
    /// The comment for the column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return comment_ ?? CommentDefaultValue; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "comment" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComment {
      get { return comment_ != null; }
    }
    /// <summary>Clears the value of the "comment" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComment() {
      comment_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColumnSchemaPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColumnSchemaPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (IsKey != other.IsKey) return false;
      if (IsNullable != other.IsNullable) return false;
      if (ReadDefaultValue != other.ReadDefaultValue) return false;
      if (WriteDefaultValue != other.WriteDefaultValue) return false;
      if (Encoding != other.Encoding) return false;
      if (Compression != other.Compression) return false;
      if (CfileBlockSize != other.CfileBlockSize) return false;
      if (!object.Equals(TypeAttributes, other.TypeAttributes)) return false;
      if (Comment != other.Comment) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasIsKey) hash ^= IsKey.GetHashCode();
      if (HasIsNullable) hash ^= IsNullable.GetHashCode();
      if (HasReadDefaultValue) hash ^= ReadDefaultValue.GetHashCode();
      if (HasWriteDefaultValue) hash ^= WriteDefaultValue.GetHashCode();
      if (HasEncoding) hash ^= Encoding.GetHashCode();
      if (HasCompression) hash ^= Compression.GetHashCode();
      if (HasCfileBlockSize) hash ^= CfileBlockSize.GetHashCode();
      if (typeAttributes_ != null) hash ^= TypeAttributes.GetHashCode();
      if (HasComment) hash ^= Comment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasType) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (HasIsKey) {
        output.WriteRawTag(32);
        output.WriteBool(IsKey);
      }
      if (HasIsNullable) {
        output.WriteRawTag(40);
        output.WriteBool(IsNullable);
      }
      if (HasReadDefaultValue) {
        output.WriteRawTag(50);
        output.WriteBytes(ReadDefaultValue);
      }
      if (HasWriteDefaultValue) {
        output.WriteRawTag(58);
        output.WriteBytes(WriteDefaultValue);
      }
      if (HasEncoding) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Encoding);
      }
      if (HasCompression) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Compression);
      }
      if (HasCfileBlockSize) {
        output.WriteRawTag(80);
        output.WriteInt32(CfileBlockSize);
      }
      if (typeAttributes_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(TypeAttributes);
      }
      if (HasComment) {
        output.WriteRawTag(98);
        output.WriteString(Comment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasIsKey) {
        size += 1 + 1;
      }
      if (HasIsNullable) {
        size += 1 + 1;
      }
      if (HasReadDefaultValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReadDefaultValue);
      }
      if (HasWriteDefaultValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(WriteDefaultValue);
      }
      if (HasEncoding) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encoding);
      }
      if (HasCompression) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Compression);
      }
      if (HasCfileBlockSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CfileBlockSize);
      }
      if (typeAttributes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypeAttributes);
      }
      if (HasComment) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColumnSchemaPB other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasIsKey) {
        IsKey = other.IsKey;
      }
      if (other.HasIsNullable) {
        IsNullable = other.IsNullable;
      }
      if (other.HasReadDefaultValue) {
        ReadDefaultValue = other.ReadDefaultValue;
      }
      if (other.HasWriteDefaultValue) {
        WriteDefaultValue = other.WriteDefaultValue;
      }
      if (other.HasEncoding) {
        Encoding = other.Encoding;
      }
      if (other.HasCompression) {
        Compression = other.Compression;
      }
      if (other.HasCfileBlockSize) {
        CfileBlockSize = other.CfileBlockSize;
      }
      if (other.typeAttributes_ != null) {
        if (typeAttributes_ == null) {
          TypeAttributes = new global::Knet.Kudu.Client.Protobuf.ColumnTypeAttributesPB();
        }
        TypeAttributes.MergeFrom(other.TypeAttributes);
      }
      if (other.HasComment) {
        Comment = other.Comment;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Type = (global::Knet.Kudu.Client.Protobuf.DataTypePB) input.ReadEnum();
            break;
          }
          case 32: {
            IsKey = input.ReadBool();
            break;
          }
          case 40: {
            IsNullable = input.ReadBool();
            break;
          }
          case 50: {
            ReadDefaultValue = input.ReadBytes();
            break;
          }
          case 58: {
            WriteDefaultValue = input.ReadBytes();
            break;
          }
          case 64: {
            Encoding = (global::Knet.Kudu.Client.Protobuf.EncodingTypePB) input.ReadEnum();
            break;
          }
          case 72: {
            Compression = (global::Knet.Kudu.Client.Protobuf.CompressionTypePB) input.ReadEnum();
            break;
          }
          case 80: {
            CfileBlockSize = input.ReadInt32();
            break;
          }
          case 90: {
            if (typeAttributes_ == null) {
              TypeAttributes = new global::Knet.Kudu.Client.Protobuf.ColumnTypeAttributesPB();
            }
            input.ReadMessage(TypeAttributes);
            break;
          }
          case 98: {
            Comment = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColumnSchemaDeltaPB : pb::IMessage<ColumnSchemaDeltaPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<ColumnSchemaDeltaPB> _parser = new pb::MessageParser<ColumnSchemaDeltaPB>(() => new ColumnSchemaDeltaPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColumnSchemaDeltaPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnSchemaDeltaPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnSchemaDeltaPB(ColumnSchemaDeltaPB other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      newName_ = other.newName_;
      defaultValue_ = other.defaultValue_;
      removeDefault_ = other.removeDefault_;
      encoding_ = other.encoding_;
      compression_ = other.compression_;
      blockSize_ = other.blockSize_;
      newComment_ = other.newComment_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnSchemaDeltaPB Clone() {
      return new ColumnSchemaDeltaPB(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "new_name" field.</summary>
    public const int NewNameFieldNumber = 2;
    private readonly static string NewNameDefaultValue = "";

    private string newName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewName {
      get { return newName_ ?? NewNameDefaultValue; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "new_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNewName {
      get { return newName_ != null; }
    }
    /// <summary>Clears the value of the "new_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNewName() {
      newName_ = null;
    }

    /// <summary>Field number for the "default_value" field.</summary>
    public const int DefaultValueFieldNumber = 4;
    private readonly static pb::ByteString DefaultValueDefaultValue = pb::ByteString.Empty;

    private pb::ByteString defaultValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DefaultValue {
      get { return defaultValue_ ?? DefaultValueDefaultValue; }
      set {
        defaultValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "default_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDefaultValue {
      get { return defaultValue_ != null; }
    }
    /// <summary>Clears the value of the "default_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDefaultValue() {
      defaultValue_ = null;
    }

    /// <summary>Field number for the "remove_default" field.</summary>
    public const int RemoveDefaultFieldNumber = 5;
    private readonly static bool RemoveDefaultDefaultValue = false;

    private bool removeDefault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RemoveDefault {
      get { if ((_hasBits0 & 1) != 0) { return removeDefault_; } else { return RemoveDefaultDefaultValue; } }
      set {
        _hasBits0 |= 1;
        removeDefault_ = value;
      }
    }
    /// <summary>Gets whether the "remove_default" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRemoveDefault {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "remove_default" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRemoveDefault() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "encoding" field.</summary>
    public const int EncodingFieldNumber = 6;
    private readonly static global::Knet.Kudu.Client.Protobuf.EncodingTypePB EncodingDefaultValue = global::Knet.Kudu.Client.Protobuf.EncodingTypePB.UnknownEncoding;

    private global::Knet.Kudu.Client.Protobuf.EncodingTypePB encoding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Knet.Kudu.Client.Protobuf.EncodingTypePB Encoding {
      get { if ((_hasBits0 & 2) != 0) { return encoding_; } else { return EncodingDefaultValue; } }
      set {
        _hasBits0 |= 2;
        encoding_ = value;
      }
    }
    /// <summary>Gets whether the "encoding" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEncoding {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "encoding" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEncoding() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "compression" field.</summary>
    public const int CompressionFieldNumber = 7;
    private readonly static global::Knet.Kudu.Client.Protobuf.CompressionTypePB CompressionDefaultValue = global::Knet.Kudu.Client.Protobuf.CompressionTypePB.UnknownCompression;

    private global::Knet.Kudu.Client.Protobuf.CompressionTypePB compression_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Knet.Kudu.Client.Protobuf.CompressionTypePB Compression {
      get { if ((_hasBits0 & 4) != 0) { return compression_; } else { return CompressionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        compression_ = value;
      }
    }
    /// <summary>Gets whether the "compression" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCompression {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "compression" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCompression() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "block_size" field.</summary>
    public const int BlockSizeFieldNumber = 8;
    private readonly static int BlockSizeDefaultValue = 0;

    private int blockSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockSize {
      get { if ((_hasBits0 & 8) != 0) { return blockSize_; } else { return BlockSizeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        blockSize_ = value;
      }
    }
    /// <summary>Gets whether the "block_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBlockSize {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "block_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBlockSize() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "new_comment" field.</summary>
    public const int NewCommentFieldNumber = 9;
    private readonly static string NewCommentDefaultValue = "";

    private string newComment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewComment {
      get { return newComment_ ?? NewCommentDefaultValue; }
      set {
        newComment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "new_comment" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNewComment {
      get { return newComment_ != null; }
    }
    /// <summary>Clears the value of the "new_comment" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNewComment() {
      newComment_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColumnSchemaDeltaPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColumnSchemaDeltaPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (NewName != other.NewName) return false;
      if (DefaultValue != other.DefaultValue) return false;
      if (RemoveDefault != other.RemoveDefault) return false;
      if (Encoding != other.Encoding) return false;
      if (Compression != other.Compression) return false;
      if (BlockSize != other.BlockSize) return false;
      if (NewComment != other.NewComment) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasNewName) hash ^= NewName.GetHashCode();
      if (HasDefaultValue) hash ^= DefaultValue.GetHashCode();
      if (HasRemoveDefault) hash ^= RemoveDefault.GetHashCode();
      if (HasEncoding) hash ^= Encoding.GetHashCode();
      if (HasCompression) hash ^= Compression.GetHashCode();
      if (HasBlockSize) hash ^= BlockSize.GetHashCode();
      if (HasNewComment) hash ^= NewComment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasNewName) {
        output.WriteRawTag(18);
        output.WriteString(NewName);
      }
      if (HasDefaultValue) {
        output.WriteRawTag(34);
        output.WriteBytes(DefaultValue);
      }
      if (HasRemoveDefault) {
        output.WriteRawTag(40);
        output.WriteBool(RemoveDefault);
      }
      if (HasEncoding) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Encoding);
      }
      if (HasCompression) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Compression);
      }
      if (HasBlockSize) {
        output.WriteRawTag(64);
        output.WriteInt32(BlockSize);
      }
      if (HasNewComment) {
        output.WriteRawTag(74);
        output.WriteString(NewComment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasNewName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
      }
      if (HasDefaultValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DefaultValue);
      }
      if (HasRemoveDefault) {
        size += 1 + 1;
      }
      if (HasEncoding) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encoding);
      }
      if (HasCompression) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Compression);
      }
      if (HasBlockSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockSize);
      }
      if (HasNewComment) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewComment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColumnSchemaDeltaPB other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasNewName) {
        NewName = other.NewName;
      }
      if (other.HasDefaultValue) {
        DefaultValue = other.DefaultValue;
      }
      if (other.HasRemoveDefault) {
        RemoveDefault = other.RemoveDefault;
      }
      if (other.HasEncoding) {
        Encoding = other.Encoding;
      }
      if (other.HasCompression) {
        Compression = other.Compression;
      }
      if (other.HasBlockSize) {
        BlockSize = other.BlockSize;
      }
      if (other.HasNewComment) {
        NewComment = other.NewComment;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            NewName = input.ReadString();
            break;
          }
          case 34: {
            DefaultValue = input.ReadBytes();
            break;
          }
          case 40: {
            RemoveDefault = input.ReadBool();
            break;
          }
          case 48: {
            Encoding = (global::Knet.Kudu.Client.Protobuf.EncodingTypePB) input.ReadEnum();
            break;
          }
          case 56: {
            Compression = (global::Knet.Kudu.Client.Protobuf.CompressionTypePB) input.ReadEnum();
            break;
          }
          case 64: {
            BlockSize = input.ReadInt32();
            break;
          }
          case 74: {
            NewComment = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SchemaPB : pb::IMessage<SchemaPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<SchemaPB> _parser = new pb::MessageParser<SchemaPB>(() => new SchemaPB());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SchemaPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemaPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemaPB(SchemaPB other) : this() {
      columns_ = other.columns_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemaPB Clone() {
      return new SchemaPB(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Knet.Kudu.Client.Protobuf.ColumnSchemaPB> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(10, global::Knet.Kudu.Client.Protobuf.ColumnSchemaPB.Parser);
    private readonly pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.ColumnSchemaPB> columns_ = new pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.ColumnSchemaPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.ColumnSchemaPB> Columns {
      get { return columns_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SchemaPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SchemaPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      columns_.WriteTo(ref output, _repeated_columns_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SchemaPB other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HostPortPB : pb::IMessage<HostPortPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<HostPortPB> _parser = new pb::MessageParser<HostPortPB>(() => new HostPortPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HostPortPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostPortPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostPortPB(HostPortPB other) : this() {
      _hasBits0 = other._hasBits0;
      host_ = other.host_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostPortPB Clone() {
      return new HostPortPB(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private readonly static string HostDefaultValue = "";

    private string host_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_ ?? HostDefaultValue; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "host" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHost {
      get { return host_ != null; }
    }
    /// <summary>Clears the value of the "host" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHost() {
      host_ = null;
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private readonly static uint PortDefaultValue = 0;

    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { if ((_hasBits0 & 1) != 0) { return port_; } else { return PortDefaultValue; } }
      set {
        _hasBits0 |= 1;
        port_ = value;
      }
    }
    /// <summary>Gets whether the "port" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPort {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "port" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPort() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HostPortPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HostPortPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHost) hash ^= Host.GetHashCode();
      if (HasPort) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHost) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (HasPort) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHost) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (HasPort) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HostPortPB other) {
      if (other == null) {
        return;
      }
      if (other.HasHost) {
        Host = other.Host;
      }
      if (other.HasPort) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The serialized format of a Kudu table partition schema.
  /// </summary>
  public sealed partial class PartitionSchemaPB : pb::IMessage<PartitionSchemaPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<PartitionSchemaPB> _parser = new pb::MessageParser<PartitionSchemaPB>(() => new PartitionSchemaPB());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartitionSchemaPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionSchemaPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionSchemaPB(PartitionSchemaPB other) : this() {
      hashBucketSchemas_ = other.hashBucketSchemas_.Clone();
      rangeSchema_ = other.rangeSchema_ != null ? other.rangeSchema_.Clone() : null;
      rangeHashSchemas_ = other.rangeHashSchemas_.Clone();
      rangeBounds_ = other.rangeBounds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionSchemaPB Clone() {
      return new PartitionSchemaPB(this);
    }

    /// <summary>Field number for the "hash_bucket_schemas" field.</summary>
    public const int HashBucketSchemasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.HashBucketSchemaPB> _repeated_hashBucketSchemas_codec
        = pb::FieldCodec.ForMessage(10, global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.HashBucketSchemaPB.Parser);
    private readonly pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.HashBucketSchemaPB> hashBucketSchemas_ = new pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.HashBucketSchemaPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.HashBucketSchemaPB> HashBucketSchemas {
      get { return hashBucketSchemas_; }
    }

    /// <summary>Field number for the "range_schema" field.</summary>
    public const int RangeSchemaFieldNumber = 2;
    private global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.RangeSchemaPB rangeSchema_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.RangeSchemaPB RangeSchema {
      get { return rangeSchema_; }
      set {
        rangeSchema_ = value;
      }
    }

    /// <summary>Field number for the "range_hash_schemas" field.</summary>
    public const int RangeHashSchemasFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.PerRangeHashBucketSchemasPB> _repeated_rangeHashSchemas_codec
        = pb::FieldCodec.ForMessage(26, global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.PerRangeHashBucketSchemasPB.Parser);
    private readonly pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.PerRangeHashBucketSchemasPB> rangeHashSchemas_ = new pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.PerRangeHashBucketSchemasPB>();
    /// <summary>
    /// Each index of 'range_bounds' represents the upper and lower bounds of
    /// ranges whose hash bucket schemas were specified. Its corresponding index
    /// of 'range_hash_schemas' represents that range's hash schema. An empty
    /// field of 'range_hash_schemas' indicates that the table wide hash schema
    /// specified in 'hash_bucket_schemas' is used. Both of these fields must have
    /// the same size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.PerRangeHashBucketSchemasPB> RangeHashSchemas {
      get { return rangeHashSchemas_; }
    }

    /// <summary>Field number for the "range_bounds" field.</summary>
    public const int RangeBoundsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Knet.Kudu.Client.Protobuf.RowOperationsPB> _repeated_rangeBounds_codec
        = pb::FieldCodec.ForMessage(34, global::Knet.Kudu.Client.Protobuf.RowOperationsPB.Parser);
    private readonly pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.RowOperationsPB> rangeBounds_ = new pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.RowOperationsPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.RowOperationsPB> RangeBounds {
      get { return rangeBounds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartitionSchemaPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartitionSchemaPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hashBucketSchemas_.Equals(other.hashBucketSchemas_)) return false;
      if (!object.Equals(RangeSchema, other.RangeSchema)) return false;
      if(!rangeHashSchemas_.Equals(other.rangeHashSchemas_)) return false;
      if(!rangeBounds_.Equals(other.rangeBounds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hashBucketSchemas_.GetHashCode();
      if (rangeSchema_ != null) hash ^= RangeSchema.GetHashCode();
      hash ^= rangeHashSchemas_.GetHashCode();
      hash ^= rangeBounds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      hashBucketSchemas_.WriteTo(ref output, _repeated_hashBucketSchemas_codec);
      if (rangeSchema_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RangeSchema);
      }
      rangeHashSchemas_.WriteTo(ref output, _repeated_rangeHashSchemas_codec);
      rangeBounds_.WriteTo(ref output, _repeated_rangeBounds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hashBucketSchemas_.CalculateSize(_repeated_hashBucketSchemas_codec);
      if (rangeSchema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RangeSchema);
      }
      size += rangeHashSchemas_.CalculateSize(_repeated_rangeHashSchemas_codec);
      size += rangeBounds_.CalculateSize(_repeated_rangeBounds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartitionSchemaPB other) {
      if (other == null) {
        return;
      }
      hashBucketSchemas_.Add(other.hashBucketSchemas_);
      if (other.rangeSchema_ != null) {
        if (rangeSchema_ == null) {
          RangeSchema = new global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.RangeSchemaPB();
        }
        RangeSchema.MergeFrom(other.RangeSchema);
      }
      rangeHashSchemas_.Add(other.rangeHashSchemas_);
      rangeBounds_.Add(other.rangeBounds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            hashBucketSchemas_.AddEntriesFrom(ref input, _repeated_hashBucketSchemas_codec);
            break;
          }
          case 18: {
            if (rangeSchema_ == null) {
              RangeSchema = new global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.RangeSchemaPB();
            }
            input.ReadMessage(RangeSchema);
            break;
          }
          case 26: {
            rangeHashSchemas_.AddEntriesFrom(ref input, _repeated_rangeHashSchemas_codec);
            break;
          }
          case 34: {
            rangeBounds_.AddEntriesFrom(ref input, _repeated_rangeBounds_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PartitionSchemaPB message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A column identifier for partition schemas. In general, the name will be
      /// used when a client creates the table since column IDs are assigned by the
      /// master. All other uses of partition schemas will use the numeric column ID.
      /// </summary>
      public sealed partial class ColumnIdentifierPB : pb::IMessage<ColumnIdentifierPB>
          , pb::IBufferMessage
      {
        private static readonly pb::MessageParser<ColumnIdentifierPB> _parser = new pb::MessageParser<ColumnIdentifierPB>(() => new ColumnIdentifierPB());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ColumnIdentifierPB> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ColumnIdentifierPB() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ColumnIdentifierPB(ColumnIdentifierPB other) : this() {
          switch (other.IdentifierCase) {
            case IdentifierOneofCase.Id:
              Id = other.Id;
              break;
            case IdentifierOneofCase.Name:
              Name = other.Name;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ColumnIdentifierPB Clone() {
          return new ColumnIdentifierPB(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return HasId ? (int) identifier_ : 0; }
          set {
            identifier_ = value;
            identifierCase_ = IdentifierOneofCase.Id;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return identifierCase_ == IdentifierOneofCase.Id; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "id" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          if (HasId) {
            ClearIdentifier();
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return HasName ? (string) identifier_ : ""; }
          set {
            identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            identifierCase_ = IdentifierOneofCase.Name;
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return identifierCase_ == IdentifierOneofCase.Name; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "name" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          if (HasName) {
            ClearIdentifier();
          }
        }

        private object identifier_;
        /// <summary>Enum of possible cases for the "identifier" oneof.</summary>
        public enum IdentifierOneofCase {
          None = 0,
          Id = 1,
          Name = 2,
        }
        private IdentifierOneofCase identifierCase_ = IdentifierOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdentifierOneofCase IdentifierCase {
          get { return identifierCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIdentifier() {
          identifierCase_ = IdentifierOneofCase.None;
          identifier_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ColumnIdentifierPB);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ColumnIdentifierPB other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Name != other.Name) return false;
          if (IdentifierCase != other.IdentifierCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasName) hash ^= Name.GetHashCode();
          hash ^= (int) identifierCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          output.WriteRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ColumnIdentifierPB other) {
          if (other == null) {
            return;
          }
          switch (other.IdentifierCase) {
            case IdentifierOneofCase.Id:
              Id = other.Id;
              break;
            case IdentifierOneofCase.Name:
              Name = other.Name;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          input.ReadRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RangeSchemaPB : pb::IMessage<RangeSchemaPB>
          , pb::IBufferMessage
      {
        private static readonly pb::MessageParser<RangeSchemaPB> _parser = new pb::MessageParser<RangeSchemaPB>(() => new RangeSchemaPB());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RangeSchemaPB> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RangeSchemaPB() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RangeSchemaPB(RangeSchemaPB other) : this() {
          columns_ = other.columns_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RangeSchemaPB Clone() {
          return new RangeSchemaPB(this);
        }

        /// <summary>Field number for the "columns" field.</summary>
        public const int ColumnsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.ColumnIdentifierPB> _repeated_columns_codec
            = pb::FieldCodec.ForMessage(10, global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.ColumnIdentifierPB.Parser);
        private readonly pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.ColumnIdentifierPB> columns_ = new pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.ColumnIdentifierPB>();
        /// <summary>
        /// Column identifiers of columns included in the range. All columns must be
        /// a component of the primary key.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.ColumnIdentifierPB> Columns {
          get { return columns_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RangeSchemaPB);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RangeSchemaPB other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!columns_.Equals(other.columns_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= columns_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          output.WriteRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          columns_.WriteTo(ref output, _repeated_columns_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += columns_.CalculateSize(_repeated_columns_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RangeSchemaPB other) {
          if (other == null) {
            return;
          }
          columns_.Add(other.columns_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          input.ReadRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class HashBucketSchemaPB : pb::IMessage<HashBucketSchemaPB>
          , pb::IBufferMessage
      {
        private static readonly pb::MessageParser<HashBucketSchemaPB> _parser = new pb::MessageParser<HashBucketSchemaPB>(() => new HashBucketSchemaPB());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HashBucketSchemaPB> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HashBucketSchemaPB() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HashBucketSchemaPB(HashBucketSchemaPB other) : this() {
          _hasBits0 = other._hasBits0;
          columns_ = other.columns_.Clone();
          numBuckets_ = other.numBuckets_;
          seed_ = other.seed_;
          hashAlgorithm_ = other.hashAlgorithm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HashBucketSchemaPB Clone() {
          return new HashBucketSchemaPB(this);
        }

        /// <summary>Field number for the "columns" field.</summary>
        public const int ColumnsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.ColumnIdentifierPB> _repeated_columns_codec
            = pb::FieldCodec.ForMessage(10, global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.ColumnIdentifierPB.Parser);
        private readonly pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.ColumnIdentifierPB> columns_ = new pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.ColumnIdentifierPB>();
        /// <summary>
        /// Column identifiers of columns included in the hash. Every column must be
        /// a component of the primary key.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.ColumnIdentifierPB> Columns {
          get { return columns_; }
        }

        /// <summary>Field number for the "num_buckets" field.</summary>
        public const int NumBucketsFieldNumber = 2;
        private readonly static int NumBucketsDefaultValue = 0;

        private int numBuckets_;
        /// <summary>
        /// Number of buckets into which columns will be hashed. Must be at least 2.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NumBuckets {
          get { if ((_hasBits0 & 1) != 0) { return numBuckets_; } else { return NumBucketsDefaultValue; } }
          set {
            _hasBits0 |= 1;
            numBuckets_ = value;
          }
        }
        /// <summary>Gets whether the "num_buckets" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNumBuckets {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "num_buckets" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNumBuckets() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "seed" field.</summary>
        public const int SeedFieldNumber = 3;
        private readonly static uint SeedDefaultValue = 0;

        private uint seed_;
        /// <summary>
        /// Seed value for hash calculation. Administrators may set a seed value
        /// on a per-table basis in order to randomize the mapping of rows to
        /// buckets. Setting a seed provides some amount of protection against denial
        /// of service attacks when the hash bucket columns contain user provided
        /// input.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Seed {
          get { if ((_hasBits0 & 2) != 0) { return seed_; } else { return SeedDefaultValue; } }
          set {
            _hasBits0 |= 2;
            seed_ = value;
          }
        }
        /// <summary>Gets whether the "seed" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSeed {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "seed" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSeed() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "hash_algorithm" field.</summary>
        public const int HashAlgorithmFieldNumber = 4;
        private readonly static global::Knet.Kudu.Client.Protobuf.HashAlgorithm HashAlgorithmDefaultValue = global::Knet.Kudu.Client.Protobuf.HashAlgorithm.UnknownHash;

        private global::Knet.Kudu.Client.Protobuf.HashAlgorithm hashAlgorithm_;
        /// <summary>
        /// The hash algorithm to use for calculating the hash bucket.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Knet.Kudu.Client.Protobuf.HashAlgorithm HashAlgorithm {
          get { if ((_hasBits0 & 4) != 0) { return hashAlgorithm_; } else { return HashAlgorithmDefaultValue; } }
          set {
            _hasBits0 |= 4;
            hashAlgorithm_ = value;
          }
        }
        /// <summary>Gets whether the "hash_algorithm" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHashAlgorithm {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "hash_algorithm" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHashAlgorithm() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HashBucketSchemaPB);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HashBucketSchemaPB other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!columns_.Equals(other.columns_)) return false;
          if (NumBuckets != other.NumBuckets) return false;
          if (Seed != other.Seed) return false;
          if (HashAlgorithm != other.HashAlgorithm) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= columns_.GetHashCode();
          if (HasNumBuckets) hash ^= NumBuckets.GetHashCode();
          if (HasSeed) hash ^= Seed.GetHashCode();
          if (HasHashAlgorithm) hash ^= HashAlgorithm.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          output.WriteRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          columns_.WriteTo(ref output, _repeated_columns_codec);
          if (HasNumBuckets) {
            output.WriteRawTag(16);
            output.WriteInt32(NumBuckets);
          }
          if (HasSeed) {
            output.WriteRawTag(24);
            output.WriteUInt32(Seed);
          }
          if (HasHashAlgorithm) {
            output.WriteRawTag(32);
            output.WriteEnum((int) HashAlgorithm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += columns_.CalculateSize(_repeated_columns_codec);
          if (HasNumBuckets) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumBuckets);
          }
          if (HasSeed) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seed);
          }
          if (HasHashAlgorithm) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HashAlgorithm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HashBucketSchemaPB other) {
          if (other == null) {
            return;
          }
          columns_.Add(other.columns_);
          if (other.HasNumBuckets) {
            NumBuckets = other.NumBuckets;
          }
          if (other.HasSeed) {
            Seed = other.Seed;
          }
          if (other.HasHashAlgorithm) {
            HashAlgorithm = other.HashAlgorithm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          input.ReadRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
                break;
              }
              case 16: {
                NumBuckets = input.ReadInt32();
                break;
              }
              case 24: {
                Seed = input.ReadUInt32();
                break;
              }
              case 32: {
                HashAlgorithm = (global::Knet.Kudu.Client.Protobuf.HashAlgorithm) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PerRangeHashBucketSchemasPB : pb::IMessage<PerRangeHashBucketSchemasPB>
          , pb::IBufferMessage
      {
        private static readonly pb::MessageParser<PerRangeHashBucketSchemasPB> _parser = new pb::MessageParser<PerRangeHashBucketSchemasPB>(() => new PerRangeHashBucketSchemasPB());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PerRangeHashBucketSchemasPB> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PerRangeHashBucketSchemasPB() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PerRangeHashBucketSchemasPB(PerRangeHashBucketSchemasPB other) : this() {
          hashSchemas_ = other.hashSchemas_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PerRangeHashBucketSchemasPB Clone() {
          return new PerRangeHashBucketSchemasPB(this);
        }

        /// <summary>Field number for the "hash_schemas" field.</summary>
        public const int HashSchemasFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.HashBucketSchemaPB> _repeated_hashSchemas_codec
            = pb::FieldCodec.ForMessage(10, global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.HashBucketSchemaPB.Parser);
        private readonly pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.HashBucketSchemaPB> hashSchemas_ = new pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.HashBucketSchemaPB>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB.Types.HashBucketSchemaPB> HashSchemas {
          get { return hashSchemas_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PerRangeHashBucketSchemasPB);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PerRangeHashBucketSchemasPB other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!hashSchemas_.Equals(other.hashSchemas_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= hashSchemas_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          output.WriteRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          hashSchemas_.WriteTo(ref output, _repeated_hashSchemas_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += hashSchemas_.CalculateSize(_repeated_hashSchemas_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PerRangeHashBucketSchemasPB other) {
          if (other == null) {
            return;
          }
          hashSchemas_.Add(other.hashSchemas_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          input.ReadRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                hashSchemas_.AddEntriesFrom(ref input, _repeated_hashSchemas_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The serialized format of a Kudu table partition.
  /// </summary>
  public sealed partial class PartitionPB : pb::IMessage<PartitionPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<PartitionPB> _parser = new pb::MessageParser<PartitionPB>(() => new PartitionPB());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartitionPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.CommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionPB(PartitionPB other) : this() {
      hashBuckets_ = other.hashBuckets_.Clone();
      partitionKeyStart_ = other.partitionKeyStart_;
      partitionKeyEnd_ = other.partitionKeyEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionPB Clone() {
      return new PartitionPB(this);
    }

    /// <summary>Field number for the "hash_buckets" field.</summary>
    public const int HashBucketsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_hashBuckets_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> hashBuckets_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// The hash buckets of the partition. The number of hash buckets must match
    /// the number of hash bucket components in the partition's schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HashBuckets {
      get { return hashBuckets_; }
    }

    /// <summary>Field number for the "partition_key_start" field.</summary>
    public const int PartitionKeyStartFieldNumber = 2;
    private readonly static pb::ByteString PartitionKeyStartDefaultValue = pb::ByteString.Empty;

    private pb::ByteString partitionKeyStart_;
    /// <summary>
    /// The encoded start partition key (inclusive).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PartitionKeyStart {
      get { return partitionKeyStart_ ?? PartitionKeyStartDefaultValue; }
      set {
        partitionKeyStart_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "partition_key_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartitionKeyStart {
      get { return partitionKeyStart_ != null; }
    }
    /// <summary>Clears the value of the "partition_key_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartitionKeyStart() {
      partitionKeyStart_ = null;
    }

    /// <summary>Field number for the "partition_key_end" field.</summary>
    public const int PartitionKeyEndFieldNumber = 3;
    private readonly static pb::ByteString PartitionKeyEndDefaultValue = pb::ByteString.Empty;

    private pb::ByteString partitionKeyEnd_;
    /// <summary>
    /// The encoded end partition key (exclusive).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PartitionKeyEnd {
      get { return partitionKeyEnd_ ?? PartitionKeyEndDefaultValue; }
      set {
        partitionKeyEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "partition_key_end" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPartitionKeyEnd {
      get { return partitionKeyEnd_ != null; }
    }
    /// <summary>Clears the value of the "partition_key_end" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPartitionKeyEnd() {
      partitionKeyEnd_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartitionPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartitionPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hashBuckets_.Equals(other.hashBuckets_)) return false;
      if (PartitionKeyStart != other.PartitionKeyStart) return false;
      if (PartitionKeyEnd != other.PartitionKeyEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hashBuckets_.GetHashCode();
      if (HasPartitionKeyStart) hash ^= PartitionKeyStart.GetHashCode();
      if (HasPartitionKeyEnd) hash ^= PartitionKeyEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      hashBuckets_.WriteTo(ref output, _repeated_hashBuckets_codec);
      if (HasPartitionKeyStart) {
        output.WriteRawTag(18);
        output.WriteBytes(PartitionKeyStart);
      }
      if (HasPartitionKeyEnd) {
        output.WriteRawTag(26);
        output.WriteBytes(PartitionKeyEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hashBuckets_.CalculateSize(_repeated_hashBuckets_codec);
      if (HasPartitionKeyStart) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PartitionKeyStart);
      }
      if (HasPartitionKeyEnd) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PartitionKeyEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartitionPB other) {
      if (other == null) {
        return;
      }
      hashBuckets_.Add(other.hashBuckets_);
      if (other.HasPartitionKeyStart) {
        PartitionKeyStart = other.PartitionKeyStart;
      }
      if (other.HasPartitionKeyEnd) {
        PartitionKeyEnd = other.PartitionKeyEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            hashBuckets_.AddEntriesFrom(ref input, _repeated_hashBuckets_codec);
            break;
          }
          case 18: {
            PartitionKeyStart = input.ReadBytes();
            break;
          }
          case 26: {
            PartitionKeyEnd = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A predicate that can be applied on a Kudu column.
  /// </summary>
  public sealed partial class ColumnPredicatePB : pb::IMessage<ColumnPredicatePB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<ColumnPredicatePB> _parser = new pb::MessageParser<ColumnPredicatePB>(() => new ColumnPredicatePB());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColumnPredicatePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.CommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnPredicatePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnPredicatePB(ColumnPredicatePB other) : this() {
      column_ = other.column_;
      switch (other.PredicateCase) {
        case PredicateOneofCase.Range:
          Range = other.Range.Clone();
          break;
        case PredicateOneofCase.Equality:
          Equality = other.Equality.Clone();
          break;
        case PredicateOneofCase.IsNotNull:
          IsNotNull = other.IsNotNull.Clone();
          break;
        case PredicateOneofCase.InList:
          InList = other.InList.Clone();
          break;
        case PredicateOneofCase.IsNull:
          IsNull = other.IsNull.Clone();
          break;
        case PredicateOneofCase.InBloomFilter:
          InBloomFilter = other.InBloomFilter.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnPredicatePB Clone() {
      return new ColumnPredicatePB(this);
    }

    /// <summary>Field number for the "column" field.</summary>
    public const int ColumnFieldNumber = 1;
    private readonly static string ColumnDefaultValue = "";

    private string column_;
    /// <summary>
    /// The predicate column name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Column {
      get { return column_ ?? ColumnDefaultValue; }
      set {
        column_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "column" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColumn {
      get { return column_ != null; }
    }
    /// <summary>Clears the value of the "column" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColumn() {
      column_ = null;
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.Range Range {
      get { return predicateCase_ == PredicateOneofCase.Range ? (global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.Range) predicate_ : null; }
      set {
        predicate_ = value;
        predicateCase_ = value == null ? PredicateOneofCase.None : PredicateOneofCase.Range;
      }
    }

    /// <summary>Field number for the "equality" field.</summary>
    public const int EqualityFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.Equality Equality {
      get { return predicateCase_ == PredicateOneofCase.Equality ? (global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.Equality) predicate_ : null; }
      set {
        predicate_ = value;
        predicateCase_ = value == null ? PredicateOneofCase.None : PredicateOneofCase.Equality;
      }
    }

    /// <summary>Field number for the "is_not_null" field.</summary>
    public const int IsNotNullFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.IsNotNull IsNotNull {
      get { return predicateCase_ == PredicateOneofCase.IsNotNull ? (global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.IsNotNull) predicate_ : null; }
      set {
        predicate_ = value;
        predicateCase_ = value == null ? PredicateOneofCase.None : PredicateOneofCase.IsNotNull;
      }
    }

    /// <summary>Field number for the "in_list" field.</summary>
    public const int InListFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.InList InList {
      get { return predicateCase_ == PredicateOneofCase.InList ? (global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.InList) predicate_ : null; }
      set {
        predicate_ = value;
        predicateCase_ = value == null ? PredicateOneofCase.None : PredicateOneofCase.InList;
      }
    }

    /// <summary>Field number for the "is_null" field.</summary>
    public const int IsNullFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.IsNull IsNull {
      get { return predicateCase_ == PredicateOneofCase.IsNull ? (global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.IsNull) predicate_ : null; }
      set {
        predicate_ = value;
        predicateCase_ = value == null ? PredicateOneofCase.None : PredicateOneofCase.IsNull;
      }
    }

    /// <summary>Field number for the "in_bloom_filter" field.</summary>
    public const int InBloomFilterFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.InBloomFilter InBloomFilter {
      get { return predicateCase_ == PredicateOneofCase.InBloomFilter ? (global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.InBloomFilter) predicate_ : null; }
      set {
        predicate_ = value;
        predicateCase_ = value == null ? PredicateOneofCase.None : PredicateOneofCase.InBloomFilter;
      }
    }

    private object predicate_;
    /// <summary>Enum of possible cases for the "predicate" oneof.</summary>
    public enum PredicateOneofCase {
      None = 0,
      Range = 2,
      Equality = 3,
      IsNotNull = 4,
      InList = 5,
      IsNull = 6,
      InBloomFilter = 7,
    }
    private PredicateOneofCase predicateCase_ = PredicateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredicateOneofCase PredicateCase {
      get { return predicateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPredicate() {
      predicateCase_ = PredicateOneofCase.None;
      predicate_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColumnPredicatePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColumnPredicatePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Column != other.Column) return false;
      if (!object.Equals(Range, other.Range)) return false;
      if (!object.Equals(Equality, other.Equality)) return false;
      if (!object.Equals(IsNotNull, other.IsNotNull)) return false;
      if (!object.Equals(InList, other.InList)) return false;
      if (!object.Equals(IsNull, other.IsNull)) return false;
      if (!object.Equals(InBloomFilter, other.InBloomFilter)) return false;
      if (PredicateCase != other.PredicateCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasColumn) hash ^= Column.GetHashCode();
      if (predicateCase_ == PredicateOneofCase.Range) hash ^= Range.GetHashCode();
      if (predicateCase_ == PredicateOneofCase.Equality) hash ^= Equality.GetHashCode();
      if (predicateCase_ == PredicateOneofCase.IsNotNull) hash ^= IsNotNull.GetHashCode();
      if (predicateCase_ == PredicateOneofCase.InList) hash ^= InList.GetHashCode();
      if (predicateCase_ == PredicateOneofCase.IsNull) hash ^= IsNull.GetHashCode();
      if (predicateCase_ == PredicateOneofCase.InBloomFilter) hash ^= InBloomFilter.GetHashCode();
      hash ^= (int) predicateCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasColumn) {
        output.WriteRawTag(10);
        output.WriteString(Column);
      }
      if (predicateCase_ == PredicateOneofCase.Range) {
        output.WriteRawTag(18);
        output.WriteMessage(Range);
      }
      if (predicateCase_ == PredicateOneofCase.Equality) {
        output.WriteRawTag(26);
        output.WriteMessage(Equality);
      }
      if (predicateCase_ == PredicateOneofCase.IsNotNull) {
        output.WriteRawTag(34);
        output.WriteMessage(IsNotNull);
      }
      if (predicateCase_ == PredicateOneofCase.InList) {
        output.WriteRawTag(42);
        output.WriteMessage(InList);
      }
      if (predicateCase_ == PredicateOneofCase.IsNull) {
        output.WriteRawTag(50);
        output.WriteMessage(IsNull);
      }
      if (predicateCase_ == PredicateOneofCase.InBloomFilter) {
        output.WriteRawTag(58);
        output.WriteMessage(InBloomFilter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasColumn) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Column);
      }
      if (predicateCase_ == PredicateOneofCase.Range) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Range);
      }
      if (predicateCase_ == PredicateOneofCase.Equality) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equality);
      }
      if (predicateCase_ == PredicateOneofCase.IsNotNull) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IsNotNull);
      }
      if (predicateCase_ == PredicateOneofCase.InList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InList);
      }
      if (predicateCase_ == PredicateOneofCase.IsNull) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IsNull);
      }
      if (predicateCase_ == PredicateOneofCase.InBloomFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InBloomFilter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColumnPredicatePB other) {
      if (other == null) {
        return;
      }
      if (other.HasColumn) {
        Column = other.Column;
      }
      switch (other.PredicateCase) {
        case PredicateOneofCase.Range:
          if (Range == null) {
            Range = new global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.Range();
          }
          Range.MergeFrom(other.Range);
          break;
        case PredicateOneofCase.Equality:
          if (Equality == null) {
            Equality = new global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.Equality();
          }
          Equality.MergeFrom(other.Equality);
          break;
        case PredicateOneofCase.IsNotNull:
          if (IsNotNull == null) {
            IsNotNull = new global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.IsNotNull();
          }
          IsNotNull.MergeFrom(other.IsNotNull);
          break;
        case PredicateOneofCase.InList:
          if (InList == null) {
            InList = new global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.InList();
          }
          InList.MergeFrom(other.InList);
          break;
        case PredicateOneofCase.IsNull:
          if (IsNull == null) {
            IsNull = new global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.IsNull();
          }
          IsNull.MergeFrom(other.IsNull);
          break;
        case PredicateOneofCase.InBloomFilter:
          if (InBloomFilter == null) {
            InBloomFilter = new global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.InBloomFilter();
          }
          InBloomFilter.MergeFrom(other.InBloomFilter);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Column = input.ReadString();
            break;
          }
          case 18: {
            global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.Range subBuilder = new global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.Range();
            if (predicateCase_ == PredicateOneofCase.Range) {
              subBuilder.MergeFrom(Range);
            }
            input.ReadMessage(subBuilder);
            Range = subBuilder;
            break;
          }
          case 26: {
            global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.Equality subBuilder = new global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.Equality();
            if (predicateCase_ == PredicateOneofCase.Equality) {
              subBuilder.MergeFrom(Equality);
            }
            input.ReadMessage(subBuilder);
            Equality = subBuilder;
            break;
          }
          case 34: {
            global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.IsNotNull subBuilder = new global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.IsNotNull();
            if (predicateCase_ == PredicateOneofCase.IsNotNull) {
              subBuilder.MergeFrom(IsNotNull);
            }
            input.ReadMessage(subBuilder);
            IsNotNull = subBuilder;
            break;
          }
          case 42: {
            global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.InList subBuilder = new global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.InList();
            if (predicateCase_ == PredicateOneofCase.InList) {
              subBuilder.MergeFrom(InList);
            }
            input.ReadMessage(subBuilder);
            InList = subBuilder;
            break;
          }
          case 50: {
            global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.IsNull subBuilder = new global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.IsNull();
            if (predicateCase_ == PredicateOneofCase.IsNull) {
              subBuilder.MergeFrom(IsNull);
            }
            input.ReadMessage(subBuilder);
            IsNull = subBuilder;
            break;
          }
          case 58: {
            global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.InBloomFilter subBuilder = new global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Types.InBloomFilter();
            if (predicateCase_ == PredicateOneofCase.InBloomFilter) {
              subBuilder.MergeFrom(InBloomFilter);
            }
            input.ReadMessage(subBuilder);
            InBloomFilter = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ColumnPredicatePB message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Range : pb::IMessage<Range>
          , pb::IBufferMessage
      {
        private static readonly pb::MessageParser<Range> _parser = new pb::MessageParser<Range>(() => new Range());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Range> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Range() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Range(Range other) : this() {
          lower_ = other.lower_;
          upper_ = other.upper_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Range Clone() {
          return new Range(this);
        }

        /// <summary>Field number for the "lower" field.</summary>
        public const int LowerFieldNumber = 1;
        private readonly static pb::ByteString LowerDefaultValue = pb::ByteString.Empty;

        private pb::ByteString lower_;
        /// <summary>
        /// The inclusive lower bound.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Lower {
          get { return lower_ ?? LowerDefaultValue; }
          set {
            lower_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "lower" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLower {
          get { return lower_ != null; }
        }
        /// <summary>Clears the value of the "lower" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLower() {
          lower_ = null;
        }

        /// <summary>Field number for the "upper" field.</summary>
        public const int UpperFieldNumber = 2;
        private readonly static pb::ByteString UpperDefaultValue = pb::ByteString.Empty;

        private pb::ByteString upper_;
        /// <summary>
        /// The exclusive upper bound.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Upper {
          get { return upper_ ?? UpperDefaultValue; }
          set {
            upper_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "upper" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUpper {
          get { return upper_ != null; }
        }
        /// <summary>Clears the value of the "upper" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUpper() {
          upper_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Range);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Range other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Lower != other.Lower) return false;
          if (Upper != other.Upper) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasLower) hash ^= Lower.GetHashCode();
          if (HasUpper) hash ^= Upper.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          output.WriteRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasLower) {
            output.WriteRawTag(10);
            output.WriteBytes(Lower);
          }
          if (HasUpper) {
            output.WriteRawTag(18);
            output.WriteBytes(Upper);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasLower) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Lower);
          }
          if (HasUpper) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Upper);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Range other) {
          if (other == null) {
            return;
          }
          if (other.HasLower) {
            Lower = other.Lower;
          }
          if (other.HasUpper) {
            Upper = other.Upper;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          input.ReadRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Lower = input.ReadBytes();
                break;
              }
              case 18: {
                Upper = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Equality : pb::IMessage<Equality>
          , pb::IBufferMessage
      {
        private static readonly pb::MessageParser<Equality> _parser = new pb::MessageParser<Equality>(() => new Equality());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Equality> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Equality() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Equality(Equality other) : this() {
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Equality Clone() {
          return new Equality(this);
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 1;
        private readonly static pb::ByteString ValueDefaultValue = pb::ByteString.Empty;

        private pb::ByteString value_;
        /// <summary>
        /// The inclusive lower bound. See comment in Range for notes on the
        /// encoding.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Value {
          get { return value_ ?? ValueDefaultValue; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValue {
          get { return value_ != null; }
        }
        /// <summary>Clears the value of the "value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          value_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Equality);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Equality other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasValue) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          output.WriteRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasValue) {
            output.WriteRawTag(10);
            output.WriteBytes(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasValue) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Equality other) {
          if (other == null) {
            return;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          input.ReadRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Value = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class InList : pb::IMessage<InList>
          , pb::IBufferMessage
      {
        private static readonly pb::MessageParser<InList> _parser = new pb::MessageParser<InList>(() => new InList());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InList() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InList(InList other) : this() {
          values_ = other.values_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InList Clone() {
          return new InList(this);
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 1;
        private static readonly pb::FieldCodec<pb::ByteString> _repeated_values_codec
            = pb::FieldCodec.ForBytes(10);
        private readonly pbc::RepeatedField<pb::ByteString> values_ = new pbc::RepeatedField<pb::ByteString>();
        /// <summary>
        /// A list of values for the field. See comment in Range for notes on
        /// the encoding.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<pb::ByteString> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InList other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!values_.Equals(other.values_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= values_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          output.WriteRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          values_.WriteTo(ref output, _repeated_values_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += values_.CalculateSize(_repeated_values_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InList other) {
          if (other == null) {
            return;
          }
          values_.Add(other.values_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          input.ReadRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                values_.AddEntriesFrom(ref input, _repeated_values_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class IsNotNull : pb::IMessage<IsNotNull>
          , pb::IBufferMessage
      {
        private static readonly pb::MessageParser<IsNotNull> _parser = new pb::MessageParser<IsNotNull>(() => new IsNotNull());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IsNotNull> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IsNotNull() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IsNotNull(IsNotNull other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IsNotNull Clone() {
          return new IsNotNull(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as IsNotNull);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IsNotNull other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          output.WriteRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IsNotNull other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          input.ReadRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }

      }

      public sealed partial class IsNull : pb::IMessage<IsNull>
          , pb::IBufferMessage
      {
        private static readonly pb::MessageParser<IsNull> _parser = new pb::MessageParser<IsNull>(() => new IsNull());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IsNull> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IsNull() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IsNull(IsNull other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IsNull Clone() {
          return new IsNull(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as IsNull);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IsNull other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          output.WriteRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IsNull other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          input.ReadRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }

      }

      public sealed partial class InBloomFilter : pb::IMessage<InBloomFilter>
          , pb::IBufferMessage
      {
        private static readonly pb::MessageParser<InBloomFilter> _parser = new pb::MessageParser<InBloomFilter>(() => new InBloomFilter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InBloomFilter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Knet.Kudu.Client.Protobuf.ColumnPredicatePB.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InBloomFilter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InBloomFilter(InBloomFilter other) : this() {
          bloomFilters_ = other.bloomFilters_.Clone();
          lower_ = other.lower_;
          upper_ = other.upper_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InBloomFilter Clone() {
          return new InBloomFilter(this);
        }

        /// <summary>Field number for the "bloom_filters" field.</summary>
        public const int BloomFiltersFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Knet.Kudu.Client.Protobuf.BlockBloomFilterPB> _repeated_bloomFilters_codec
            = pb::FieldCodec.ForMessage(10, global::Knet.Kudu.Client.Protobuf.BlockBloomFilterPB.Parser);
        private readonly pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.BlockBloomFilterPB> bloomFilters_ = new pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.BlockBloomFilterPB>();
        /// <summary>
        /// A list of bloom filters for the field.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.BlockBloomFilterPB> BloomFilters {
          get { return bloomFilters_; }
        }

        /// <summary>Field number for the "lower" field.</summary>
        public const int LowerFieldNumber = 2;
        private readonly static pb::ByteString LowerDefaultValue = pb::ByteString.Empty;

        private pb::ByteString lower_;
        /// <summary>
        /// lower and upper are optional for InBloomFilter.
        /// When using both InBloomFilter and Range predicate for the same column the
        /// merged result can be InBloomFilter within specified range.
        ///
        /// The inclusive lower bound.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Lower {
          get { return lower_ ?? LowerDefaultValue; }
          set {
            lower_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "lower" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLower {
          get { return lower_ != null; }
        }
        /// <summary>Clears the value of the "lower" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLower() {
          lower_ = null;
        }

        /// <summary>Field number for the "upper" field.</summary>
        public const int UpperFieldNumber = 3;
        private readonly static pb::ByteString UpperDefaultValue = pb::ByteString.Empty;

        private pb::ByteString upper_;
        /// <summary>
        /// The exclusive upper bound.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Upper {
          get { return upper_ ?? UpperDefaultValue; }
          set {
            upper_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "upper" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUpper {
          get { return upper_ != null; }
        }
        /// <summary>Clears the value of the "upper" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUpper() {
          upper_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InBloomFilter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InBloomFilter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!bloomFilters_.Equals(other.bloomFilters_)) return false;
          if (Lower != other.Lower) return false;
          if (Upper != other.Upper) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= bloomFilters_.GetHashCode();
          if (HasLower) hash ^= Lower.GetHashCode();
          if (HasUpper) hash ^= Upper.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          output.WriteRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          bloomFilters_.WriteTo(ref output, _repeated_bloomFilters_codec);
          if (HasLower) {
            output.WriteRawTag(18);
            output.WriteBytes(Lower);
          }
          if (HasUpper) {
            output.WriteRawTag(26);
            output.WriteBytes(Upper);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += bloomFilters_.CalculateSize(_repeated_bloomFilters_codec);
          if (HasLower) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Lower);
          }
          if (HasUpper) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Upper);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InBloomFilter other) {
          if (other == null) {
            return;
          }
          bloomFilters_.Add(other.bloomFilters_);
          if (other.HasLower) {
            Lower = other.Lower;
          }
          if (other.HasUpper) {
            Upper = other.Upper;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          input.ReadRawMessage(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                bloomFilters_.AddEntriesFrom(ref input, _repeated_bloomFilters_codec);
                break;
              }
              case 18: {
                Lower = input.ReadBytes();
                break;
              }
              case 26: {
                Upper = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The primary key range of a Kudu tablet.
  /// </summary>
  public sealed partial class KeyRangePB : pb::IMessage<KeyRangePB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<KeyRangePB> _parser = new pb::MessageParser<KeyRangePB>(() => new KeyRangePB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyRangePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.CommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyRangePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyRangePB(KeyRangePB other) : this() {
      _hasBits0 = other._hasBits0;
      startPrimaryKey_ = other.startPrimaryKey_;
      stopPrimaryKey_ = other.stopPrimaryKey_;
      sizeBytesEstimates_ = other.sizeBytesEstimates_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyRangePB Clone() {
      return new KeyRangePB(this);
    }

    /// <summary>Field number for the "start_primary_key" field.</summary>
    public const int StartPrimaryKeyFieldNumber = 1;
    private readonly static pb::ByteString StartPrimaryKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString startPrimaryKey_;
    /// <summary>
    /// Encoded primary key to begin scanning at (inclusive).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StartPrimaryKey {
      get { return startPrimaryKey_ ?? StartPrimaryKeyDefaultValue; }
      set {
        startPrimaryKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "start_primary_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartPrimaryKey {
      get { return startPrimaryKey_ != null; }
    }
    /// <summary>Clears the value of the "start_primary_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartPrimaryKey() {
      startPrimaryKey_ = null;
    }

    /// <summary>Field number for the "stop_primary_key" field.</summary>
    public const int StopPrimaryKeyFieldNumber = 2;
    private readonly static pb::ByteString StopPrimaryKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString stopPrimaryKey_;
    /// <summary>
    /// Encoded primary key to stop scanning at (exclusive).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StopPrimaryKey {
      get { return stopPrimaryKey_ ?? StopPrimaryKeyDefaultValue; }
      set {
        stopPrimaryKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "stop_primary_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStopPrimaryKey {
      get { return stopPrimaryKey_ != null; }
    }
    /// <summary>Clears the value of the "stop_primary_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStopPrimaryKey() {
      stopPrimaryKey_ = null;
    }

    /// <summary>Field number for the "size_bytes_estimates" field.</summary>
    public const int SizeBytesEstimatesFieldNumber = 3;
    private readonly static ulong SizeBytesEstimatesDefaultValue = 0UL;

    private ulong sizeBytesEstimates_;
    /// <summary>
    /// Number of bytes in chunk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SizeBytesEstimates {
      get { if ((_hasBits0 & 1) != 0) { return sizeBytesEstimates_; } else { return SizeBytesEstimatesDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sizeBytesEstimates_ = value;
      }
    }
    /// <summary>Gets whether the "size_bytes_estimates" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSizeBytesEstimates {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "size_bytes_estimates" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSizeBytesEstimates() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyRangePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyRangePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartPrimaryKey != other.StartPrimaryKey) return false;
      if (StopPrimaryKey != other.StopPrimaryKey) return false;
      if (SizeBytesEstimates != other.SizeBytesEstimates) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStartPrimaryKey) hash ^= StartPrimaryKey.GetHashCode();
      if (HasStopPrimaryKey) hash ^= StopPrimaryKey.GetHashCode();
      if (HasSizeBytesEstimates) hash ^= SizeBytesEstimates.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStartPrimaryKey) {
        output.WriteRawTag(10);
        output.WriteBytes(StartPrimaryKey);
      }
      if (HasStopPrimaryKey) {
        output.WriteRawTag(18);
        output.WriteBytes(StopPrimaryKey);
      }
      if (HasSizeBytesEstimates) {
        output.WriteRawTag(24);
        output.WriteUInt64(SizeBytesEstimates);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStartPrimaryKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StartPrimaryKey);
      }
      if (HasStopPrimaryKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StopPrimaryKey);
      }
      if (HasSizeBytesEstimates) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SizeBytesEstimates);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyRangePB other) {
      if (other == null) {
        return;
      }
      if (other.HasStartPrimaryKey) {
        StartPrimaryKey = other.StartPrimaryKey;
      }
      if (other.HasStopPrimaryKey) {
        StopPrimaryKey = other.StopPrimaryKey;
      }
      if (other.HasSizeBytesEstimates) {
        SizeBytesEstimates = other.SizeBytesEstimates;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StartPrimaryKey = input.ReadBytes();
            break;
          }
          case 18: {
            StopPrimaryKey = input.ReadBytes();
            break;
          }
          case 24: {
            SizeBytesEstimates = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TableExtraConfigPB : pb::IMessage<TableExtraConfigPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<TableExtraConfigPB> _parser = new pb::MessageParser<TableExtraConfigPB>(() => new TableExtraConfigPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TableExtraConfigPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.CommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableExtraConfigPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableExtraConfigPB(TableExtraConfigPB other) : this() {
      _hasBits0 = other._hasBits0;
      historyMaxAgeSec_ = other.historyMaxAgeSec_;
      maintenancePriority_ = other.maintenancePriority_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TableExtraConfigPB Clone() {
      return new TableExtraConfigPB(this);
    }

    /// <summary>Field number for the "history_max_age_sec" field.</summary>
    public const int HistoryMaxAgeSecFieldNumber = 1;
    private readonly static int HistoryMaxAgeSecDefaultValue = 0;

    private int historyMaxAgeSec_;
    /// <summary>
    /// Number of seconds to retain history for tablets in this table,
    /// including history required to perform diff scans and incremental
    /// backups. Reads initiated at a snapshot that is older than this
    /// age will be rejected. Equivalent to --tablet_history_max_age_sec.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HistoryMaxAgeSec {
      get { if ((_hasBits0 & 1) != 0) { return historyMaxAgeSec_; } else { return HistoryMaxAgeSecDefaultValue; } }
      set {
        _hasBits0 |= 1;
        historyMaxAgeSec_ = value;
      }
    }
    /// <summary>Gets whether the "history_max_age_sec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHistoryMaxAgeSec {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "history_max_age_sec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHistoryMaxAgeSec() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "maintenance_priority" field.</summary>
    public const int MaintenancePriorityFieldNumber = 2;
    private readonly static int MaintenancePriorityDefaultValue = 0;

    private int maintenancePriority_;
    /// <summary>
    /// Priority level of a table for maintenance, it will be clamped into
    /// range [-FLAGS_max_priority_range, FLAGS_max_priority_range] when
    /// calculate maintenance priority score.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaintenancePriority {
      get { if ((_hasBits0 & 2) != 0) { return maintenancePriority_; } else { return MaintenancePriorityDefaultValue; } }
      set {
        _hasBits0 |= 2;
        maintenancePriority_ = value;
      }
    }
    /// <summary>Gets whether the "maintenance_priority" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMaintenancePriority {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "maintenance_priority" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMaintenancePriority() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TableExtraConfigPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TableExtraConfigPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HistoryMaxAgeSec != other.HistoryMaxAgeSec) return false;
      if (MaintenancePriority != other.MaintenancePriority) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHistoryMaxAgeSec) hash ^= HistoryMaxAgeSec.GetHashCode();
      if (HasMaintenancePriority) hash ^= MaintenancePriority.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHistoryMaxAgeSec) {
        output.WriteRawTag(8);
        output.WriteInt32(HistoryMaxAgeSec);
      }
      if (HasMaintenancePriority) {
        output.WriteRawTag(16);
        output.WriteInt32(MaintenancePriority);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasHistoryMaxAgeSec) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HistoryMaxAgeSec);
      }
      if (HasMaintenancePriority) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaintenancePriority);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TableExtraConfigPB other) {
      if (other == null) {
        return;
      }
      if (other.HasHistoryMaxAgeSec) {
        HistoryMaxAgeSec = other.HistoryMaxAgeSec;
      }
      if (other.HasMaintenancePriority) {
        MaintenancePriority = other.MaintenancePriority;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HistoryMaxAgeSec = input.ReadInt32();
            break;
          }
          case 16: {
            MaintenancePriority = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
